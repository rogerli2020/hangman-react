{"version":3,"sources":["components/playerPlate.jsx","components/wordBoard.jsx","actions/index.js","components/eachKey.jsx","components/eachRowOfKeys.jsx","components/keyboard.jsx","components/guessSubmission.jsx","components/gameStartPage.jsx","components/scoreBoard.jsx","components/newWordSubmission.jsx","components/roundEndPage.jsx","components/mainBoard.jsx","App.js","reportWebVitals.js","reducers/correctGuesses.js","reducers/correctWord.js","reducers/endGame.js","reducers/entireGameStarted.js","reducers/falseGuesses.js","reducers/falseInputCount.js","reducers/hintCount.js","reducers/players.js","reducers/roundCount.js","reducers/roundState.js","reducers/tipToggle.js","reducers/wordBoard.js","reducers/maxRoundCount.js","reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","backgroundColor","margin","maxWidth","height","cover","alignSelf","width","details","flexDirection","content","flex","MediaControlCard","props","classes","Card","className","CardMedia","image","playerInfo","avatar","title","style","Typography","fontSize","fontWeight","name","color","role","score","WordBoard","wordBoardState","useSelector","state","wordBoardReducer","Paper","textAlign","justifyContent","alignItems","class","returnString","i","length","getString","addScore","type","data","updateCurrentScoreCalculation","arr","updateRoundState","c","updateWordBoard","EachKey","dispatch","useDispatch","correctWord","correctWordReducer","correctGuesses","correctGuessesReducer","falseGuesses","falseGuessesReducer","playersReducer","hintCount","hintCountReducer","falseGuessCount","falseInputCountReducer","useEffect","updateWordBoardState","currScore","newCurrentWordState","allCharsGuessed","includes","handleRoundEnd","handleCharacterInput","thisChar","updateFalseGuesses","correctCharCount","Set","split","size","wrongCharCount","baseScore","Math","floor","reward","penalty","total","surrendered","calcScore","used","onClick","EachRowOfKeys","key","usedList","rowOfKeys","map","eachChar","Keyboard","correctGuessesList","falseGuessesList","roundState","roundStateReducer","overlay","eachRow","handleCharacterClick","console","log","SubmitGuess","onSubmit","event","preventDefault","inp","target","value","toUpperCase","alert","TextField","variant","id","label","marginLeft","marginTop","Button","GameStartPage","useState","firstNameState","setFirstNameState","secondNameState","setSecondNameState","player1InputStyles","error","helperText","player2InputStyles","position","left","right","top","bottom","zIndex","fontStyle","nameEntered","minWidth","msg","SimpleCard","CardContent","component","SubmitNewWord","roundCount","roundCountReducer","maxRoundCount","maxRoundCountReducer","resetData","test","window","wordEntered","newWord","corrWord","getWordState","RoundEndPage","roundNum","gameEnded","endGameReducer","player1Score","player2Score","textDecoration","printWinner","marginBottom","opacity","auto","flexGrow","paper","padding","spacing","palette","text","secondary","MainBoard","players","currentRound","entireGameStarted","entireGameStartedReducer","currentRoundState","Grid","container","item","xs","maxHeight","marginRight","borderRadius","App","tipToggleReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","concat","defaultPlayerList","newArr","player1","player2","newArr2","newArr3","newArr4","newArr5","newArr6","allReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c285b79b.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    backgroundColor: \"rgb(61, 184, 184)\",\n    margin: 5,\n    maxWidth: 400,\n    height: 75,\n  },\n  cover: {\n    alignSelf: \"center\",\n    width: 60,\n    height: 60,\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '0 0 auto',\n  },\n}));\n\nexport default function MediaControlCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardMedia\n        className={classes.cover}\n        image={props.playerInfo.avatar}\n        title=\"Live from space album cover\"\n      />\n        <div style={{alignSelf: \"center\"}}>\n          <Typography style={{fontSize: 20, fontWeight: \"bold\", margin: 0}}>\n            {props.playerInfo.name}\n          </Typography>\n          <Typography style={{fontSize: 15, color: \"black\", margin: 0}}>\n            {props.role}, Score: {props.playerInfo.score} pts.\n          </Typography>\n        </div>\n    </Card>\n  );\n}","import React, { Component } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Paper from '@material-ui/core/Paper'\n\nconst WordBoard = () => {\n    const wordBoardState = useSelector(state => state.wordBoardReducer)\n\n    const getString = (wordBoardState) => {\n        var returnString = \"\"\n        for(var i = 0; i < wordBoardState.length; i++) {\n            returnString += wordBoardState[i]\n            returnString += \" \"\n        }\n        return returnString\n    }\n\n    return ( \n        <Paper style={{\n            textAlign: 'center',\n            color: \"primary\",\n            margin: 3,\n            height: \"98%\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: \"center\",\n          }}>\n\n            <word-boardtext class={wordBoardState===null ? \"notext\" : null}>\n                    {wordBoardState===null ? \"a word is being selected...\" : \n                    getString(wordBoardState)}\n            </word-boardtext>\n        </Paper>\n        );\n}\n \nexport default WordBoard;","export const updateCorrectGuesses = (c) => {\n    return {\n        type: \"UPDATE_CORRECT_GUESSES\",\n        data: c\n    }\n}\n\nexport const updateFalseGuesses = (c) => {\n    return {\n        type: \"UPDATE_FALSE_GUESSES\",\n        data: c\n    }\n}\n\nexport const setWord = (strObj) => {\n    return {\n        type: \"SET_CORRECT_WORD\",\n        newWord: strObj,\n    }\n}\n\nexport const endGame = () => {\n    return {\n        type: \"CONCLUDE\"\n    }\n}\n\nexport const startEntireGame = () => {\n    return {\n        type: \"START_ENTIRE_GAME\"\n    }\n}\n\nexport const updateFalseInputCount = () => {\n    return {\n        type: \"UPDATE_FALSE_INPUT_COUNT\"\n    }\n}\n\nexport const updateHintCount = () => {\n    return {\n        type: \"UPDATE_HINT_COUNT\"\n    }\n}\n\nexport const addScore = (score) => {\n    return {\n        type: \"ADD_SCORE_TO_GUESSER\",\n        data: score\n    }\n}\n\nexport const switchPlayers = () => {\n    return {\n        type: \"SWITCH_PLAYERS\"\n    }\n}\n\nexport const switchPlayersFullRound = () => {\n    return {\n        type: \"SWITCH_PLAYERS_FULL_ROUND\"\n    }\n}\n\nexport const resetPlayerData = () => {\n    return {\n        type: \"RESET_PLAYER_DATA\"\n    }\n}\n\nexport const setPlayer1Name = (name) => {\n    return {\n        type: \"SET_PLAYER_1_NAME\",\n        data: name\n    }\n}\n\nexport const setPlayer2Name = (name) => {\n    return {\n        type: \"SET_PLAYER_2_NAME\",\n        data: name\n    }\n}\n\nexport const updateCurrentScoreCalculation = (arr) => {\n    return {\n        type: \"UPDATE_CURRENT_SCORE_CALCULATION\",\n        data: arr\n    }\n}\n\nexport const guesserSurrenders = () => {\n    return {\n        type: \"GUESSER_SURRENDERS\"\n    }\n}\n\nexport const updateRoundCount = () => {\n    return {\n        type: \"UPDATE_ROUND_COUNT\"\n    }\n}\n\nexport const updateRoundState = (c) => {\n    return {\n        type: \"UPDATE_ROUND_STATE\",\n        data: c\n    }\n}\n\nexport const toggleTips = () => {\n    return {\n        type: \"TOGGLE_TIPS\"\n    }\n}\n\nexport const updateWordBoard = (arr) => {\n    return {\n        type: \"UPDATE_WORD_BOARD\",\n        data: arr\n    }\n}\n\nexport const changeMaxRoundCount = (num) => {\n    return {\n        type: \"CHANGE_MAX_ROUND_COUNT\",\n        data: num\n    }\n}\n\nexport const resetCorrectGuesses = () => {\n    return {\n        type: \"RESET_CORRECT_GUESSES\"\n    }\n}\n\nexport const resetFalseGuesses = () => {\n    return {\n        type: \"RESET_FALSE_GUESSES\"\n    }\n}\n\nexport const resetHintCount = () => {\n    return {\n        type: \"RESET_HINT_COUNT\"\n    }\n}\n\nexport const resetFalseInputCount = () => {\n    return {\n        type: \"RESET_FALSE_INPUT_COUNT\"\n    }\n}","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFalseGuesses, \n            updateCorrectGuesses, \n            updateWordBoard, \n            updateRoundState,\n            addScore,\n            updateCurrentScoreCalculation,\n         } from \"../actions\"\n\nfunction EachKey(props) {\n\n    const dispatch = useDispatch();\n    const correctWord = useSelector(state => state.correctWordReducer);\n    const correctGuesses = useSelector(state => state.correctGuessesReducer);\n    const falseGuesses = useSelector(state => state.falseGuessesReducer);\n    const playerInfo = useSelector(state => state.playersReducer)\n    const hintCount = useSelector(state => state.hintCountReducer)\n    const falseGuessCount = useSelector(state => state.falseInputCountReducer)\n\n    useEffect(() => {\n        updateWordBoardState();\n        }\n    )\n\n    const handleClick = () => {\n        if (!props.used) {\n            handleCharacterInput(props.thisChar);\n        }\n    }\n\n    const calcScore = () => {\n        const correctCharCount = (new Set(correctWord.split(\"\"))).size\n        const wrongCharCount = 26 - correctCharCount\n    \n        const baseScore = Math.floor(1000 * (wrongCharCount - falseGuesses.length)/(wrongCharCount))\n        const reward = Math.floor(500 * (correctCharCount - correctGuesses.length)/correctCharCount)\n        const penalty = -(100 * hintCount + 200 * falseGuessCount)\n        const compensation = 25 * 0 // not implemented yet...\n        const total = (baseScore + reward + penalty + compensation)\n        \n        if (!playerInfo[0].surrendered && total >= 0) {\n            dispatch(addScore(total))\n            dispatch(updateCurrentScoreCalculation([baseScore, reward, penalty, compensation, total]))\n        } else {\n            dispatch(addScore(0))\n            dispatch(updateCurrentScoreCalculation([0, 0, 0, 0, 0]))\n        }\n      }\n\n    const updateWordBoardState = () => {\n        if (playerInfo[0].currScore === null) {\n            var newCurrentWordState = [];\n            var allCharsGuessed = true\n\n            for (var i = 0; i < correctWord.length; i++) {\n                if (correctGuesses.includes(correctWord[i])) {\n                    newCurrentWordState += [correctWord[i]];\n                }\n                else {\n                    newCurrentWordState += ['_'];\n                    allCharsGuessed = false;\n                }\n            }\n            \n            if (allCharsGuessed) {\n                handleRoundEnd()\n            }\n            dispatch(updateWordBoard(newCurrentWordState));\n        }\n    }\n    \n    const handleCharacterInput = (thisChar) => {\n        if (correctWord.includes(thisChar)) {\n            dispatch(updateCorrectGuesses(thisChar));\n        } else {\n            dispatch(updateFalseGuesses(thisChar));\n        }\n    }\n\n    const handleRoundEnd = () => {\n        calcScore();\n        dispatch(updateRoundState('e'));\n    }\n\n    return ( \n        <each-key \n            class = { props.used ? \"used\" : \"\" }\n            onClick={ handleClick }\n        >\n            {props.thisChar}\n        </each-key>\n        );\n}\n \nexport default EachKey;","import React from 'react'\nimport EachKey from './eachKey';\nimport { useSelector } from \"react-redux\"\n\nfunction EachRowOfKeys(props) {\n\n    // props: list of chars, list of used chars.\n    var key=0\n\n    const falseList = useSelector(state => state.falseGuessesReducer);\n    const corrList = useSelector(state => state.correctGuessesReducer);\n    const usedList = falseList + corrList;\n\n    return ( \n        <each-row-of-keys>\n            {\n                props.rowOfKeys.map(\n                    eachChar => (\n                        <EachKey \n                            key={key++}\n                            used={usedList.includes(eachChar) ? true : false}\n                            thisChar={eachChar}\n                        />\n                    )\n                )\n            }\n        </each-row-of-keys>\n        );\n}\n \nexport default EachRowOfKeys;","import React from 'react'\nimport EachRowOfKeys from './eachRowOfKeys';\nimport { useSelector } from \"react-redux\";\n\nfunction Keyboard() {\n\n    const correctGuessesList = useSelector(state => state.correctGuessesReducer)\n    const falseGuessesList = useSelector(state => state.falseGuessesReducer)\n    const roundState = useSelector(state => state.roundStateReducer)\n    const usedList = correctGuessesList + falseGuessesList\n\n    function checkEachChar(eachChar) {\n        \n        if (falseGuessesList.indexOf(eachChar) !== -1 ||\n            correctGuessesList.indexOf(eachChar) !== -1 ) {\n                return \n        } else {\n            return\n        }\n    }\n\n    function overlay() {\n        if (roundState === \"n\") {\n        return (\n            <keyboard-panel \n                class=\"overlay\"\n            >\n                    <br/><br/><br/>\n                    waiting for the Executor to select a word...\n            </keyboard-panel>\n            )\n        }\n    }\n\n    const listOfChars=[\n        ['Q','W','E','R','T','Y','U','I','O','P'],\n        ['A','S','D','F','G','H','J','K','L'],\n        ['Z','X','C','V','B','N','M']\n    ]\n\n    var key=0\n\n    return ( \n        <keyboard-panel>\n        {overlay()}\n            {\n                listOfChars.map(\n                    eachRow => (\n                        <EachRowOfKeys \n                            key={key++}\n                            rowOfKeys={eachRow}\n                            usedList={usedList}\n                            handleCharacterClick={ () => console.log(\"clicked!\")}\n                        />\n                    )\n                )\n            }\n        </keyboard-panel>\n        );\n}\n \nexport default Keyboard;","import React from 'react'\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport {\n    updateRoundState,\n    addScore,\n    updateFalseInputCount,\n    updateCurrentScoreCalculation,\n} from \"../actions\"\n\nfunction SubmitGuess() {\n\n    const dispatch = useDispatch()\n    const correctWord = useSelector(state => state.correctWordReducer)\n    const correctGuesses = useSelector(state => state.correctGuessesReducer);\n    const falseGuesses = useSelector(state => state.falseGuessesReducer);\n    const playerInfo = useSelector(state => state.playersReducer)\n    const hintCount = useSelector(state => state.hintCountReducer)\n    const falseGuessCount = useSelector(state => state.falseInputCountReducer)\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        var inp = event.target[0].value;\n        inp = inp.toUpperCase();\n\n        if (inp == correctWord) {\n          // change game state to \"e\"\n          dispatch(updateRoundState(\"e\"))\n          // update score and current score list...\n          calcScore()\n        } \n        else {\n         // update false input count\n           dispatch(updateFalseInputCount())\n           alert(\"Your guess was not correct... 200 points deducted.\")\n        }\n    }\n\n    const calcScore = () => {\n        const correctCharCount = (new Set(correctWord.split(\"\"))).size\n        const wrongCharCount = 26 - correctCharCount\n    \n        const baseScore = Math.floor(1000 * (wrongCharCount - falseGuesses.length)/(wrongCharCount))\n        const reward = Math.floor(500 * (correctCharCount - correctGuesses.length)/correctCharCount)\n        const penalty = -(100 * hintCount + 200 * falseGuessCount)\n        const compensation = 25 * 0 // not implemented yet...\n        const total = (baseScore + reward + penalty + compensation)\n        \n        if (!playerInfo[0].surrendered && total >= 0) {\n            dispatch(addScore(total))\n            dispatch(updateCurrentScoreCalculation([baseScore, reward, penalty, compensation, total]))\n        } else {\n            dispatch(addScore(0))\n            dispatch(updateCurrentScoreCalculation([0, 0, 0, 0, 0]))\n        }\n      }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField \n                variant=\"outlined\"\n                id=\"standard-basic\" \n                label=\"Enter your guess here...\" \n                color=\"primary\" \n                style={{marginLeft: 7, marginTop: 5}}\n            />      \n            <Button \n                type=\"submit\" \n                value=\"Submit\" \n                color=\"primary\"\n                style={{ margin: 8, fontSize: 15, marginTop: 15}}>\n                SUBMIT\n            </Button>\n        </form>\n    );\n}\n \nexport default SubmitGuess;","import React, { useState } from 'react'\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport { useDispatch } from \"react-redux\";\nimport { setPlayer1Name, setPlayer2Name, startEntireGame } from \"../actions\"\n\nfunction GameStartPage() {\n    const [firstNameState, setFirstNameState] = useState(0);\n    const [secondNameState, setSecondNameState] = useState(0);\n    const dispatch = useDispatch();\n     // 0 - none, 1 - error, 2 - accepted.\n\n    const handleSubmit1 = (event) => {\n        event.preventDefault()\n        const nameEntered = event.target[0].value\n\n        if (nameEntered.length === 0) { setFirstNameState(1) }\n        else {\n            setFirstNameState(2)\n            dispatch(setPlayer1Name(nameEntered));\n         }\n    }\n\n    const handleSubmit2 = (event) => {\n        event.preventDefault()\n        const nameEntered = event.target[0].value\n\n        if (nameEntered.length === 0) { setSecondNameState(1) }\n        else {\n            setSecondNameState(2)\n            dispatch(setPlayer2Name(nameEntered));\n        }\n    }\n\n\n    const player1InputStyles = [<TextField \n            id=\"standard-basic\" \n            label=\"Enter Player1's name\" \n            color=\"primary\" \n            style={{ margin: 8 }}\n        />,\n        <TextField \n            error\n            id=\"standard-basic\" \n            label=\"Enter Player1's name\" \n            color=\"primary\" \n            style={{ margin: 8 }}\n            helperText=\"Name cannot be blank.\"\n        /> ,\n        <TextField\n            label=\"Name Accepted!\"\n            id=\"validation-outlined-input\"\n            style={{ margin: 8 }}\n      />\n    ]\n\n    const player2InputStyles = [<TextField \n            id=\"standard-basic\" \n            label=\"Enter Player2's name\" \n            color=\"primary\" \n            style={{ margin: 8 }}\n        />,\n        <TextField \n            error\n            id=\"standard-basic\" \n            label=\"Enter Player1's name\" \n            color=\"primary\" \n            style={{ margin: 8 }}\n            helperText=\"Name cannot be blank.\"\n        /> ,\n        <TextField\n            label=\"Name Accepted!\"\n            id=\"validation-outlined-input\"\n            style={{ margin: 8 }}\n\n    />\n    ]\n\n    const startGame = () => {\n        dispatch(startEntireGame());\n    }\n\n        return ( \n            <div \n                style={\n                    {\n                        height: \"auto\",\n                        width: \"auto\",\n                        position: \"absolute\",\n                        backgroundColor: \"rgba(191, 236, 255, 0.98)\",\n                        display: \"flex\",\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        bottom: 0,\n                        zIndex: 5,\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        fontStyle: \"italic\",\n                        fontSize: 25,\n                        color: \"rgb(6, 54, 55)\",\n                        textAlign: \"center\",\n                    }\n                }\n            >\n                <div>\n                    <h1>Let's Play Hangman!</h1>\n\n                    <form id=\"firstPlayerName\" onSubmit={handleSubmit1}>\n                        {player1InputStyles[firstNameState]}\n                        <Button \n                            variant=\"outlined\"\n                            type=\"submit\" \n                            value=\"Submit\" \n                            color=\"primary\"\n                            style={{ margin: 8, fontSize: 15}}>\n                            SUBMIT\n                        </Button>\n                    </form>\n\n                    <form id=\"secondPlayerName\" onSubmit={handleSubmit2}>\n                        {player2InputStyles[secondNameState]}\n                        <Button \n                            variant=\"outlined\"\n                            type=\"submit\" \n                            value=\"Submit\" \n                            color=\"primary\"\n                            style={{ margin: 8, fontSize: 15}}>\n                            SUBMIT\n                        </Button>\n                    </form>\n\n                    <br/>\n\n                    <Button \n                        id=\"submit\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        onClick={startGame}\n                        style={{ margin: 20, fontSize: 20, fontWeight: \"bold\"}}>\n                        START GAME\n                    </Button>\n                </div>\n            </div>\n         );\n}\n \nexport default GameStartPage;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    backgroundColor: \"beige\",\n    margin: 5,\n    width: \"100%\",\n    height: \"100%\",\n  },\n  title: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  surrendered: {\n    color: \"red\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  msg: {    \n    color: \"gray\",\n    fontStyle: \"italic\",\n    textAlign: \"center\",\n    fontSize: \"15px\",\n  }\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n\n        <Typography className={classes.title} color=\"textSecondary\">\n          {props.playerInfo.name}'s Score:\n        </Typography>\n\n        <hr/>\n \n        <Typography variant=\"body2\" component=\"p\">\n          {props.playerInfo.surrendered \n            ? \n            <Typography className={classes.surrendered}>\n              SURRENDERED\n            </Typography> \n            : \"\"\n          }\n          {props.playerInfo.currScore === null ? \n                    <Typography className={classes.msg}>\n                      hasn't played as the Guesser yet...\n                    </Typography> :\n          <table>\n            <tr>\n              <td>BASE SCORE:</td>\n              <td>{props.playerInfo.currScore[0]}</td>\n            </tr>\n            <tr>\n              <td>REWARD POINTS:</td>\n              <td>{props.playerInfo.currScore[1]}</td>\n            </tr>\n            <tr>\n              <td>PENALTY:</td>\n              <td>{props.playerInfo.currScore[2]}</td>\n            </tr>\n            <tr>\n              <td>COMPENSATION:</td>\n              <td>{props.playerInfo.currScore[3]}</td>\n            </tr>\n            <tr>\n              <td>ROUND TOTAL:</td>\n              <td>{props.playerInfo.currScore[4]}</td>\n            </tr>\n            <br/>\n\n          </table>\n          }\n          <table>\n          <tr>\n              <td> <b>CUM. TOTAL:</b> </td>\n              <td>{props.playerInfo.score}</td>\n            </tr>\n          </table>\n        </Typography>\n\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setWord,\n         switchPlayers, \n         updateRoundState, \n         updateWordBoard,\n         switchPlayersFullRound,\n         updateRoundCount,\n         endGame,\n         resetCorrectGuesses,\n         resetFalseGuesses,\n         resetHintCount,\n         resetFalseInputCount,\n        } from \"../actions\"\n\nfunction SubmitNewWord(){\n\n    const dispatch = useDispatch();\n    const roundCount = useSelector(state => state.roundCountReducer)\n    const maxRoundCount = useSelector(state => state.maxRoundCountReducer);\n\n    const checkValidity = (inp) => {\n        if (/[^a-zA-Z]/.test(inp) || inp.length < 3) return false;\n        return true;\n    }\n\n    const getWordState = (corrWord) => {\n        var newCurrentWordState = [];\n        for (var i = 0; i < corrWord.length; i++) {\n                newCurrentWordState += ['_'];\n            }\n        return newCurrentWordState;\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (!checkValidity(event.target[0].value)) {\n            window.alert(\"[NOT ACCEPTED] Please enter a valid English word that is longer than 3 characters.\")\n        } else {\n            const wordEntered = event.target[0].value\n            dispatch(setWord(wordEntered.toUpperCase()))\n            dispatch(updateWordBoard(getWordState(wordEntered)))\n            dispatch(updateRoundCount())\n\n            if (roundCount % 2 === 0) {\n                dispatch(switchPlayers())\n            } else {\n                dispatch(switchPlayersFullRound())\n            }\n\n            if (roundCount === maxRoundCount) {\n                dispatch(endGame())\n            }\n            resetData()\n            dispatch(updateRoundState(\"i\"))\n        }\n    }\n\n    const resetData = () => {\n        // RESET FALSE GUESSES\n        dispatch(resetCorrectGuesses())\n        // RESET CORRECT GUESSES\n        dispatch(resetFalseGuesses())\n        // RESET HINT COUNT\n        dispatch(resetHintCount())\n        // RESET FALSE INPUT COUNT\n        dispatch(resetFalseInputCount())\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField \n                id=\"standard-basic\" \n                variant=\"outlined\" \n                label=\"Enter a word here...\" \n                color=\"primary\" \n                style={{ margin: 8 }}\n            />\n            <Button \n                type=\"submit\" \n                value=\"Submit\" \n                color=\"primary\"\n                style={{ marginTop: 20, fontSize: 15 }}>\n                SUBMIT\n            </Button>                \n        </form>\n    );\n}\n \nexport default SubmitNewWord;","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ScoreBoard from \"./scoreBoard\"\nimport Card from '@material-ui/core/Card';\nimport SubmitNewWord from './newWordSubmission';\nimport Button from '@material-ui/core/Button';\nimport { resetPlayerData } from \"../actions\"\n\n\nfunction RoundEndPage() {\n    // dictated by 1) round count. 2) round state\n    const dispatch = useDispatch();\n    const roundNum = useSelector(state => state.roundCountReducer)\n    const correctWord = useSelector(state => state.correctWordReducer)\n    const playerInfo = useSelector(state => state.playersReducer)\n    const gameEnded = useSelector(state => state.endGameReducer)\n\n    const resetGame = () => {\n        //UNDER CONSTRUCTION!!\n        dispatch(resetPlayerData())\n    }\n\n    const printWinner = () => {\n        const player1Score = playerInfo[0].score;\n        const player2Score = playerInfo[1].score;\n\n        if (player1Score > player2Score) {\n            return (\n                <div style={{textDecoration: \"underline\", fontStyle:\"noraml\", color: \"forestgreen\"}}>\n                    <br/>\n                    {playerInfo[0].name} won, Congrats!\n                </div>\n            )\n        } else if (player1Score < player2Score) {\n            return (\n                <div style={{textDecoration: \"underline\", fontStyle:\"noraml\", color: \"forestgreen\"}}>\n                    <br/>\n                    {playerInfo[1].name} won, Congrats!\n                </div>\n            )\n        } else {\n            return (\n                <div style={{textDecoration: \"underline\", fontStyle:\"noraml\", color: \"forestgreen\"}}>\n                    <br/>\n                    A tie was reached. Congrats to both parties!\n                </div>\n            )\n        }\n    }\n\n    return(\n        <div \n        style={\n            {\n                height: \"auto\",\n                width: \"auto\",\n                position: \"absolute\",\n                backgroundColor: \"rgba(191, 236, 255, 0.98)\",\n                display: \"flex\",\n                left: 0,\n                right: 0,\n                top: 0,\n                bottom: 0,\n                zIndex: 4,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontStyle: \"italic\",\n                fontSize: 25,\n                fontWeight: \"bold\",\n                color: \"rgb(6, 54, 55)\",\n                textAlign: \"center\",\n            }\n        }\n    >\n            <div>\n                {roundNum !== 1 ?\n                    <div>\n                        <div>\n                            <h1 style={{fontSize:15, margin:0}}>CORRECT WORD:</h1>\n                            <Card>\n                                {correctWord}\n                            </Card>\n                        </div>\n\n                        <div style={{alignItems: 'center', display: \"flex\"}}>\n                            <ScoreBoard playerInfo={playerInfo[0]}/>\n                            <ScoreBoard playerInfo={playerInfo[1]}/>\n                        </div>\n                    </div>\n                : null\n                }\n\n                {!gameEnded ?\n                    <div>\n                        <div \n                            style={{fontWeight: \"bold\", \n                                    fontStyle: \"normal\", \n                                    fontSize: 18,\n                                    marginTop: 15,\n                                    marginBottom: 5}}>\n                        {playerInfo[0].name}, please enter a word:\n                        </div>\n\n                        <div \n                            style={{\n                                    fontWeight: \"lightre\",\n                                    fontStyle: \"normal\", \n                                    fontSize: 15,\n                                    opacity: 0.5}}>\n                        {playerInfo[1].name}, please look away...\n                        </div>\n\n                        <SubmitNewWord/>\n                    </div>\n                    :\n                        <div>\n                        {printWinner()}\n                        <Button \n                            style={{margin: 10, fontSize: 15}}\n                            onClick={resetGame} \n                        > \n                                START A NEW GAME\n                        </Button>\n                        </div>\n                }\n            </div>\n\n\n\n        </div>\n    )\n}\n\nexport default RoundEndPage;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport PlayerPlate from \"./playerPlate\";\nimport WordBoard from \"./wordBoard\";\nimport Keyboard from \"./keyboard\"\nimport SubmitGuess from \"./guessSubmission\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateRoundState, guesserSurrenders, addScore, updateCurrentScoreCalculation } from '../actions';\n\nimport GameStartPage from \"./gameStartPage\";\nimport RoundEndPage from \"./roundEndPage\";\nimport { auto } from 'async';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: auto,\n    height: auto,\n    flexGrow: 2,\n    backgroundColor: \"rgb(155, 210, 210)\",\n    maxWidth: 1000,\n    position: \"relative\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    margin: 3,\n    height: 200\n  },\n}));\n\nexport default function MainBoard() {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const players = useSelector(state => state.playersReducer);\n  const currentRound = useSelector(state => state.roundCountReducer);\n  const entireGameStarted = useSelector(state => state.entireGameStartedReducer);\n  const currentRoundState = useSelector(state => state.roundStateReducer);\n  const maxRoundCount = useSelector(state => state.maxRoundCountReducer);\n\n  const surrendered = () => {\n    dispatch(guesserSurrenders());\n    dispatch(updateRoundState(\"e\"));\n    calcScore()\n  }\n\n  const calcScore = () => {\n\n    const baseScore = 0\n    const reward = 0\n    const penalty = 0\n    const compensation = 0\n    const total = 0\n    \n    dispatch(addScore(total))\n    dispatch(updateCurrentScoreCalculation([baseScore, reward, penalty, compensation, total]))\n  }\n\n  return (\n    <div className={classes.root}>\n\n    {!entireGameStarted ? <GameStartPage/> : \"\"}\n    {currentRoundState ===\"e\" ? <RoundEndPage/> : \"\"}\n\n      <Grid container>\n        <Grid item xs={3}>\n          <h1 style={\n            {fontStyle:\"italic\",\n            textDecoration:\"underline overline\",\n            marginLeft:20, \n            display: \"flex\",\n            opacity:\"0.5\",\n            }\n          }\n          >\n              H a n g-m a n!!!\n          </h1>\n          <Button \n                        color=\"primary\"\n                    >\n                        RULES\n                    </Button>\n                    <Button \n                        color=\"primary\"\n                    >\n                        CHANGE MAX ROUNDS\n                    </Button>\n        </Grid>\n\n        <Grid item xs={5}>\n          <div style={{\n            display: \"flex\", \n            maxHeight: \"70%\",\n            marginLeft: 20,\n            marginRight:20,\n            marginTop: 5,\n            justifyContent:\"center\", \n            alignItems: \"center\",\n            backgroundColor: \"rgb(135, 190, 190)\",\n            borderRadius: 10,\n            }}>\n          <h1 style={{fontStyle:\"italic\", marginLeft:10, display: \"flex\", fontSize:40}}>\n              Round {currentRound <= 2 ? 1 : Math.floor(currentRound / 2)}\n              <h1 style={{fontSize: 20, opacity: \".5\"}}> / {maxRoundCount / 2}</h1>\n          </h1>\n          </div>\n\n        </Grid>\n\n        <Grid item xs={4}>\n          <PlayerPlate playerInfo={players[1]} role=\"Executor\"/>\n        </Grid>\n\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>HINT <br/>(under construction)</Paper>\n        </Grid>\n        <Grid item xs={8}>\n          <WordBoard/>\n        </Grid>\n        <Grid item xs={4}>\n            <PlayerPlate playerInfo={players[0]} role=\"Guesser\"/>\n            <SubmitGuess/>\n            <hr/>\n\n        <div style={{alignItems: 'center', display: \"flex\"}}>\n            <div style={{marginLeft: 7}}>\n                <Button \n                    variant=\"contained\" \n                    color=\"secondary\"\n                    onClick={surrendered}\n                >\n                    SURRENDER\n                </Button>\n            </div>\n\n            <div style={{marginLeft: 7}}>\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                >\n                    TIPS\n                </Button>\n            </div>\n        </div>\n\n\n        </Grid>\n        <Grid item xs={8}>\n          <Keyboard/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}","import { Button } from '@material-ui/core';\nimport React, { useState, useReducer } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MainBoard from './components/mainBoard';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const players = useSelector(state => state.playersReducer)\n  const tipsOpen = useSelector(state => state.tipToggleReducer)\n  const corrWord = useSelector(state => state.correctWordReducer)\n\n  return (\n    <div>\n      <MainBoard/>\n      LAST UPDATED 08/18/2021\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const correctGuessesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"UPDATE_CORRECT_GUESSES\":\n            state = state.concat(action.data);\n            return state;\n        case \"RESET_CORRECT_GUESSES\":\n            return [];\n        default:\n            return state;\n    }\n}\n\nexport default correctGuessesReducer;","const correctWordReducer = (state=\"#\", action) => {\n    switch(action.type) {\n        case \"SET_CORRECT_WORD\":\n            return action.newWord;\n        default:\n            return state;\n    }\n}\n\nexport default correctWordReducer;","const endGameReducer = (state=false, action) => {\n    switch(action.type) {\n        case \"CONCLUDE\":\n            return true;\n        default:\n            return state;\n    }\n}\n\nexport default endGameReducer;","const entireGameStartedReducer = (state = false, action) => {\n    switch(action.type) {\n        case \"START_ENTIRE_GAME\":\n            return true;\n        default:\n            return state;\n    }\n}\n\nexport default entireGameStartedReducer;","const falseGuessesReducer = (state=[], action) => {\n    switch(action.type) {\n        case \"UPDATE_FALSE_GUESSES\":\n            return state.concat(action.data);\n        case \"RESET_FALSE_GUESSES\":\n            return [];\n        default:\n            return state\n    }\n}\n\nexport default falseGuessesReducer;","const falseInputCountReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"UPDATE_FALSE_INPUT_COUNT\":\n            return state + 1;\n        case \"RESET_FALSE_INPUT_COUNT\":\n            return 0;\n        default:\n            return state;\n    }\n}\n\nexport default falseInputCountReducer;","const hintCountReducer = (state=0, action) => {\n    switch(action.type) {\n        case \"UPDATE_HINT_COUNT\":\n            return state + 1;\n        case \"RESET_HINT_COUNT\":\n            return 0\n        default:\n            return state;\n    }\n}\n\nexport default hintCountReducer;","\n\nconst defaultPlayerList = [\n    {   key: 0,\n        name: \"Cat\",\n        avatar: \"https://freepngimg.com/thumb/painting/84774-square-art-pixel-rectangle-cat-hd-image-free-png.png\",\n        score: 0,\n        currScore: null,\n        surrendered: false,\n    }, \n    {   key: 1,\n        name: \"Dog\",\n        avatar: \"https://freepngimg.com/thumb/technology/86267-flowey-square-angle-dog-undertale-free-photo-png.png\",\n        score: 0,\n        currScore: null,\n        surrendered: false,\n    }\n]\n\nconst playersReducer = (state=defaultPlayerList, action) => {\n    switch(action.type) {\n        case \"ADD_SCORE_TO_GUESSER\":\n            var newArr = [...state];\n            newArr[0].score += action.data;\n            return newArr;\n        case \"SWITCH_PLAYERS\":\n            var player1 = state[0]\n            var player2 = state[1]\n            return [player2, player1]\n        case \"SWITCH_PLAYERS_FULL_ROUND\":\n            var player1 = state[0]\n            player1.surrendered = false;\n            player1.currScore = null;\n            var player2 = state[1]\n            player2.surrendered = false;\n            player2.currScore = null;\n            return [player2, player1]\n        case \"RESET_PLAYER_DATA\":\n            var newArr2 = defaultPlayerList\n            newArr2[0].name = state[0].name\n            newArr2[1].name = state[1].name\n            return newArr2;\n        case \"SET_PLAYER_1_NAME\":\n            var newArr3 = [...state];\n            newArr3[0].name = action.data;\n            return newArr3;\n        case \"SET_PLAYER_2_NAME\":\n            var newArr4 = [...state];\n            newArr4[1].name = action.data;\n            return newArr4;\n        case \"UPDATE_CURRENT_SCORE_CALCULATION\":\n            var newArr5 = [...state]\n            newArr5[0].currScore = action.data;\n            return newArr5;\n        case \"GUESSER_SURRENDERS\":\n            var newArr6 = [...state]\n            newArr6[0].surrendered = true;\n            return newArr6;\n        \n        default:\n            return state;\n    }\n}\n\nexport default playersReducer;","const roundCountReducer = (state=1, action) => {\n    switch(action.type) {\n        case \"UPDATE_ROUND_COUNT\":\n            return state + 1;\n        default:\n            return state;\n    }\n}\n\nexport default roundCountReducer;","const roundStateReducer = (state='e', action) => {\n    switch(action.type) { // e == \"ended\", \"i\" == in progress\n        case \"UPDATE_ROUND_STATE\":\n            return action.data\n        default:\n            return state;\n    }\n}\n\nexport default roundStateReducer;\n\n","const tipToggleReducer = (state=true, action) => {\n    switch(action.type) {\n        case \"TOGGLE_TIPS\":\n            return !state;\n        default:\n            return state;\n    }\n}\n\nexport default tipToggleReducer;","const wordBoardReducer =(state=null, action) => {\n    switch(action.type) {\n        case \"UPDATE_WORD_BOARD\":\n            return action.data;\n        default:\n            return state;\n    }\n}\n\nexport default wordBoardReducer;","const maxRoundCountReducer =(state=6, action) => {\n    switch(action.type) {\n        case \"CHANGE_MAX_ROUND_COUNT\":\n            return action.data;\n        default:\n            return state;\n    }\n}\n\nexport default maxRoundCountReducer;","import { combineReducers } from \"redux\";\n\nimport correctGuessesReducer from \"./correctGuesses\";\nimport correctWordReducer from \"./correctWord\";\nimport endGameReducer from \"./endGame\";\nimport entireGameStartedReducer from \"./entireGameStarted\";\nimport falseGuessesReducer from \"./falseGuesses\";\nimport falseInputCountReducer from \"./falseInputCount\";\nimport hintCountReducer from \"./hintCount\";\nimport playersReducer from \"./players\";\nimport roundCountReducer from \"./roundCount\";\nimport roundStateReducer from \"./roundState\";\nimport tipToggleReducer from \"./tipToggle\";\nimport wordBoardReducer from \"./wordBoard\";\nimport maxRoundCountReducer from \"./maxRoundCount\"\n\nconst allReducers = combineReducers( \n    {\n        correctGuessesReducer,\n        correctWordReducer,\n        endGameReducer,\n        entireGameStartedReducer,\n        falseGuessesReducer,\n        falseInputCountReducer,\n        hintCountReducer,\n        playersReducer,\n        roundCountReducer,\n        roundStateReducer,\n        tipToggleReducer,\n        wordBoardReducer,\n        maxRoundCountReducer,\n\n    }\n)\n\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from \"redux\";\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk';\n\nconst store = createStore( allReducers, applyMiddleware(thunk) )\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}