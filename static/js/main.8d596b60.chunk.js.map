{"version":3,"sources":["components/playerPlate.jsx","components/roleDisplayer.jsx","components/wordBoard.jsx","components/eachKey.jsx","components/eachRowOfKeys.jsx","components/keyboard.jsx","components/scoreBoard.jsx","components/tipsPage.jsx","components/guessSubmission.jsx","components/newWordSubmission.jsx","App.js","reportWebVitals.js","index.js"],"names":["PlayerPlate","Fragment","class","src","this","props","avatar","name","score","Component","RoleDisplayer","player","WordBoard","getString","returnString","i","word","length","getState","gameState","EachKey","handleClick","used","handleCharacterClick","thisChar","onClick","EachRowOfKeys","key","rowOfKeys","map","eachChar","usedList","includes","Keyboard","checkEachChar","falseGuesses","correctGuesses","indexOf","overlay","isReady","listOfChars","test","eachRow","ScoreBoard","currState","players","scores","Tips","SubmitGuess","handleSubmit","event","preventDefault","handleGuessSubmission","target","value","onSubmit","type","placeholder","SubmitNewWord","checkValidity","inp","setWord","window","alert","App","state","wholeGameStarted","correctWord","currentWordState","tipsOpen","hintCount","changeCount","falseGuessCount","surrendered","getWordState","newCurrentWordState","setState","updateWord","console","log","updateScore","newScore","a","newArr","character","concat","toString","calcScore","resetGame","player0","player1","toUpperCase","toggleTips","split","newFalseGuessCount","correctCharCount","Set","size","wrongCharCount","baseScore","Math","floor","reward","penalty","compensation","total","surrender","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d596b60.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass PlayerPlate extends Component {\n\n    render() { \n        return (\n            <React.Fragment>\n                <player-plate class='base'>\n                <img class=\"playerAvatar\" src={this.props.avatar}></img>\n                <div>\n                <player-plate class='playerName'>{this.props.name}</player-plate>\n                <player-plate class='score'>SCORE: {this.props.score}</player-plate>\n                </div>\n                </player-plate>\n            </React.Fragment>\n         );\n    }\n}\n \nexport default PlayerPlate;","import React, { Component } from 'react'\n\nclass RoleDisplayer extends Component {\n\n    render() { \n        return ( \n            <React.Fragment>\n                <role-displayer>\n                    {this.props.player.name} is playing as the Guesser.\n                </role-displayer>\n            </React.Fragment>\n         );\n    }\n}\n \nexport default RoleDisplayer;","import React, { Component } from 'react'\n\nclass WordBoard extends Component {\n\n    getString = () => {\n        var returnString = \"\"\n        for(var i = 0; i < this.props.word.length; i++) {\n            returnString += this.props.word[i]\n            returnString += \" \"\n        }\n        return returnString\n    }\n\n    getState = () => {\n        if (this.props.gameState == \"n\") return \"notext\";\n        if (this.props.gameState == \"e\") return \"ended\";\n        if (this.props.gameState == \"s\") return \"surrendered\";\n        return null;\n    }\n\n    render() {\n        return ( \n            <word-board class={this.getState()}>\n                <word-boardtext class={this.getState()}>\n                        {this.props.word === null ? \"a word is being selected...\" : \n                        this.getString()}\n                </word-boardtext>\n            </word-board>\n         );\n    }\n}\n \nexport default WordBoard;","import React, { Component } from 'react';\n\nclass EachKey extends Component {\n\n    handleClick = () => {\n        if (!this.props.used) {\n            this.props.handleCharacterClick(this.props.thisChar)\n        }\n    }\n\n    render() { \n\n        return ( \n            <each-key \n                class = { this.props.used ? \"used\" : \"\" }\n                onClick={ this.handleClick }\n            >\n                {this.props.thisChar}\n            </each-key>\n         );\n    }\n}\n \nexport default EachKey;","import React, { Component } from 'react'\nimport EachKey from './eachKey';\n\nclass EachRowOfKeys extends Component {\n\n    // props: list of chars, list of used chars.\n    key=0\n\n    render() { \n        return ( \n            <each-row-of-keys>\n                {\n                    this.props.rowOfKeys.map(\n                        eachChar => (\n                            <EachKey \n                                key={this.key++}\n                                used={this.props.usedList.includes(eachChar) ? true : false}\n                                thisChar={eachChar}\n                                handleCharacterClick={this.props.handleCharacterClick}\n                            />\n                        )\n                    )\n                }\n            </each-row-of-keys>\n         );\n    }\n}\n \nexport default EachRowOfKeys;","import React, { Component } from 'react'\nimport EachRowOfKeys from './eachRowOfKeys';\n\nclass Keyboard extends Component {\n\n    // this.props: usedList\n\n    checkEachChar = (eachChar) => {\n        const { falseGuesses, correctGuesses } = this.props;\n        \n        if (falseGuesses.indexOf(eachChar) !== -1 ||\n            correctGuesses.indexOf(eachChar) !== -1 ) {\n                return \n        } else {\n            return\n        }\n    }\n\n    overlay = () => {\n        if (!this.props.isReady) {\n        return <keyboard-panel class=\"overlay\"><br/><br/><br/>waiting for the Executor to select a word...</keyboard-panel>}\n    }\n\n    listOfChars=[\n        ['Q','W','E','R','T','Y','U','I','O','P'],\n        ['A','S','D','F','G','H','J','K','L'],\n        ['Z','X','C','V','B','N','M']\n    ]\n\n    test=['A','B','C','R']\n    key=0\n\n    render() { \n        return ( \n            <keyboard-panel>\n                {this.overlay()}\n                {\n                    this.listOfChars.map(\n                        eachRow => (\n                            <EachRowOfKeys \n                                key={this.key++}\n                                rowOfKeys={eachRow}\n                                usedList={this.props.usedList}\n                                handleCharacterClick={this.props.handleCharacterClick}\n                            />\n                        )\n                    )\n                }\n            </keyboard-panel>\n         );\n    }\n}\n \nexport default Keyboard;","import React, { Component } from 'react';\n\nclass ScoreBoard extends Component {\n\n    render() { \n        return ( \n            <score-board>\n                <b>{this.props.currState.players[0].name}'s SCORE:</b> <br/>\n                [Base Score]: {this.props.scores[0]}<br/>\n                [Reward]: {this.props.scores[1]}<br/>\n                [Compensation]: {this.props.scores[3]}<br/>\n                [Penalty]: -{this.props.scores[2]}<br/>\n                [TOTAL]: {this.props.scores[4]} <br/>\n                <br/>\n                [CUM.TOTAL] : {this.props.currState.players[0].score}\n            </score-board> \n        );\n    }\n}\n \nexport default ScoreBoard;","import React, { Component } from 'react'\n\nclass Tips extends Component {\n\n    render() { \n        return ( \n            <game-overlay onClick={this.props.onClick}>\n                TIPS FOR MAXIMIZING YOUR SCORE: <br/>\n                <br/>\n                1. Use as less tips as possible.  <br/>\n                2. Try to minimize the number of letters you guess.  <br/>\n                3. Once you're sure what the word is, hit the \"I KNOW WHAT THE WORD IS\"  <br/>\n                button and enter it. Do not enter it on the main screen or else you  <br/>\n                will lose all your reward points.  <br/>\n                <br/>\n                <br/>\n                CLICK ANYWHERE TO CLOSE\n                \n            </game-overlay>\n         );\n    }\n}\n \nexport default Tips;","import React, { Component } from 'react'\n\nclass SubmitGuess extends Component {\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.props.handleGuessSubmission(event.target[0].value)\n    }\n\n    render() { \n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" placeholder=\"enter your guess here...\"/>\n                <input type=\"submit\"/>\n            </form>\n        );\n    }\n}\n \nexport default SubmitGuess;","import React, { Component } from 'react'\n\nclass SubmitNewWord extends Component {\n\n    checkValidity = (inp) => {\n        if (/[^a-zA-Z]/.test(inp) || inp.length < 3) return false;\n        return true;\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        if (!this.checkValidity(event.target[0].value)) {\n            window.alert(\"[NOT ACCEPTED] Please enter a valid English word that is longer than 3 characters.\")\n        } else {\n            this.props.setWord(event.target[0].value)\n            event.target[0].value = \"\"\n        }\n    }\n\n    render() { \n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" placeholder=\"enter a new word for the guesser...\"/>\n                <input type=\"submit\"/>\n            </form>\n        );\n    }\n}\n \nexport default SubmitNewWord;","import React, { Component } from 'react';\nimport PlayerPlate from \"./components/playerPlate\"\nimport RoleDisplayer from './components/roleDisplayer';\nimport WordBoard from './components/wordBoard';\nimport Keyboard from \"./components/keyboard\";\nimport ScoreBoard from \"./components/scoreBoard\"\nimport Tips from \"./components/tipsPage\"\nimport SubmitGuess from './components/guessSubmission';\nimport SubmitNewWord from './components/newWordSubmission';\n\nclass App extends Component {\n  state = { \n    wholeGameStarted: false,\n    correctWord: \"**PLACEHOLDER**\",\n    currentWordState: null,\n    tipsOpen: false,\n    correctGuesses: [],\n    falseGuesses: [],\n    hintCount: 0,\n    changeCount: 0,\n    gameState: \"n\", // n = notready, i = inprogress, e = ended, s = surrendered\n    falseGuessCount: 0,\n    surrendered: false,\n    players: [\n      { key: 0,\n        name: \"Bob\",\n        avatar: \"https://image.freepik.com/free-vector/businessman-character-avatar-isolated_24877-60111.jpg\",\n        score: 0,\n        }, \n      { key: 1,\n        name: \"Alice\",\n        avatar: \"https://cdn.iconscout.com/icon/premium/png-512-thumb/female-avatar-12-774634.png\",\n        score: 0,\n        }, \n    ]\n   };\n\n  getWordState = () => {\n      var newCurrentWordState = [];\n      for (var i = 0; i < this.state.correctWord.length; i++) {\n          if (this.state.correctGuesses.includes(this.state.correctWord[i])) {\n              newCurrentWordState += [this.state.correctWord[i]];\n          }\n          else {\n              newCurrentWordState += ['_'];\n          }\n      }\n      this.setState({currentWordState : newCurrentWordState});\n  }\n\n  updateWord = () => {\n    console.log(\"updateWord() triggered.\")\n  }\n\n  updateScore = async (newScore) => {\n    var newArr = [...this.state.players]\n    newArr[0].score += newScore\n    await this.setState({players : newArr})\n  }\n\n  handleCharacterClick = async (character) => {\n    const correct = this.state.correctWord.includes(character) ? true : false;\n    if (correct) {\n      await this.setState({correctGuesses: this.state.correctGuesses.concat(character)})\n    }\n    else {\n      await this.setState({falseGuesses: this.state.falseGuesses.concat(character)})\n    }\n    this.getWordState();\n    if (this.state.currentWordState.toString() == this.state.correctWord) {\n      this.setState( {gameState : \"e\"} );\n      this.calcScore(true);\n    }\n  }\n\n  resetGame = async () => {\n    var player0 = this.state.players[0]\n    var player1 = this.state.players[1]\n\n    await this.setState(\n      { \n        wholeGameStarted: true,\n        correctWord: \"**PLACEHOLDER**\",\n        currentWordState: null,\n        tipsOpen: false,\n        correctGuesses: [],\n        falseGuesses: [],\n        hintCount: 0,\n        changeCount: 0,\n        gameState: \"n\", // n = notready, i = inprogress, e = ended, s = surrendered\n        falseGuessCount: 0,\n        surrendered: false,\n        players: [\n          player1,\n          player0\n        ]\n       }\n    )\n  }\n\n  setWord = async (inp) => {\n    var inp = inp.toUpperCase()\n    if (this.state.wholeGameStarted) { this.resetGame();}\n\n    await this.setState( {wholeGameStarted: true} )\n    await this.setState( {correctWord : inp, gameState : \"i\" } )\n\n    this.getWordState();\n  }\n\n  toggleTips =  () => {\n    this.setState({tipsOpen : !this.state.tipsOpen})\n  }\n\n  handleGuessSubmission = (inp) => {\n    if (this.state.correctWord === \"**PLACEHOLDER**\") return; \n    var inp = inp.toUpperCase()\n\n    if (inp == this.state.correctWord) {\n      this.setState({gameState : \"e\", currentWordState : inp.split()})\n      this.calcScore(true);\n    } \n    else {\n      const newFalseGuessCount = this.state.falseGuessCount + 1\n      this.setState( {falseGuessCount : newFalseGuessCount} )\n    }\n  }\n\n  calcScore = (updateScore) => {\n    const currState = this.state\n    const correctCharCount = (new Set(currState.correctWord.split(\"\"))).size\n    const wrongCharCount = 26 - correctCharCount\n\n    const baseScore = Math.floor(1000 * (wrongCharCount - currState.falseGuesses.length)/(wrongCharCount))\n    const reward = Math.floor(500 * (correctCharCount - currState.correctGuesses.length)/correctCharCount)\n    const penalty = 100 * currState.hintCount + 200 * currState.falseGuessCount\n    const compensation = 25 * currState.changeCount\n    const total = baseScore + reward - penalty + compensation\n\n    if (updateScore) {\n      if (this.state.surrendered) {\n        this.updateScore(100)\n      }\n      else {this.updateScore(total)}\n    }\n    if (this.state.surrendered) { return [100, 0, 0, 0, 0] }\n    return [baseScore, reward, penalty, compensation, total]\n  }\n\n  surrender = async () => {\n    if (this.state.gameState != \"i\" || this.state.surrendered) {return} \n    await this.setState( {surrendered : true, gameState : 's'} );\n    await this.calcScore(true);\n  }\n\n  render() { \n    return ( \n      <React.Fragment>\n        <main className=\"container\">\n        <WordBoard word={this.state.currentWordState} gameState={this.state.gameState}/>\n        <RoleDisplayer player={this.state.players[0]}/>\n        {this.state.players.map(\n          player => (<PlayerPlate\n            key={player.key}\n            avatar={player.avatar}\n            name={player.name}\n            score={player.score}/>)\n        )}\n        <Keyboard \n          isReady={this.state.correctWord===\"**PLACEHOLDER**\" || this.state.gameState == \"e\" || this.state.gameState == \"s\" ? false : true}\n          handleCharacterClick={this.handleCharacterClick}\n          usedList={this.state.correctGuesses + this.state.falseGuesses}/>\n        \n        {this.state.gameState != \"i\" ? \n          <div> {this.state.wholeGameStarted ? this.state.players[0].name : this.state.players[1].name}, enter a word to start game...</div> : \n          <div>Game is in progress...</div>}\n        <SubmitNewWord setWord={this.setWord}/>\n        <SubmitGuess handleGuessSubmission={this.handleGuessSubmission}/>\n\n        <button onClick={this.toggleTips}>TIPS</button>\n        <button onClick={this.surrender}>SURRENDER</button>\n        {this.state.tipsOpen ? <Tips onClick={this.toggleTips}/> : null}\n        <ScoreBoard currState={this.state} scores={this.calcScore(false)}></ScoreBoard>\n\n        </main>\n      </React.Fragment>\n     );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}